import { envs } from "../../config/index.js";
import { exec } from "child_process";
import { getNiceDataService } from "../../services/index.js";

export const niceResponseService = async (sEncData, type) => {
  try {
    const sSiteCode = `${envs.NICE_TOKEN_API.SITE_CODE}`;
    //console.log(sSiteCode);
    const sSitePW = `${envs.NICE_TOKEN_API.SITE_PASSWORD}`;
    const sModulePath = `${envs.NICE_TOKEN_API.MODULE_PATH}`;
    let cmd = "";
    if (/^0-9a-zA-Z+\/=/.test(sEncData) == true) {
      return {
        status: "error",
        error: {
          sRtnMSG: "Input error",
          requestnumber: "",
          authtype: "",
          errcode: "",
        },
      };
    } else {
      if (sEncData != "") {
        cmd = sModulePath + " " + "DEC" + " " + sSiteCode + " " + sSitePW + " " + sEncData;
      }
      const exAsync = (cmd) => {
        const child = exec(cmd, { encoding: "euc-kr" });
        return new Promise((resolve, reject) => {
          let sDecData = "";
          child.stdout.on("data", function (data) {
            sDecData += data;
          });

          child.stderr.on("data", (x) => {
            console.log("stderr", x.toString());
          });

          child.on("close", function () {
            let sRtnMSG = "";
            let userInfo = {};
            //Check the results of the processing
            if (sDecData == "-1") {
              sRtnMSG = "Cancer/decryption system error";
            } else if (sDecData == "-4") {
              sRtnMSG = "Decryption processing error";
            } else if (sDecData == "-5") {
              sRtnMSG = "HASH value mismatch - decryption data returned";
            } else if (sDecData == "-6") {
              sRtnMSG = "Decryption data error";
            } else if (sDecData == "-9") {
              sRtnMSG = "Input error";
            } else if (sDecData == "-12") {
              sRtnMSG = "Site password error";
            } else {
              if (type == "success") {
                //For a description of the topic, see the development guide
                const requestnumber = decodeURIComponent(
                  getNiceDataService.getValue(sDecData, "REQ_SEQ"),
                ); //CP Request Number , returns the value generated by main. Comparable in sessions, etc.
                const responsenumber = decodeURIComponent(
                  getNiceDataService.getValue(sDecData, "RES_SEQ"),
                ); //Returns the value generated by the unique number , Nice.
                const authtype = decodeURIComponent(
                  getNiceDataService.getValue(sDecData, "AUTH_TYPE"),
                ); //Authentication Means
                const name = decodeURIComponent(getNiceDataService.getValue(sDecData, "UTF8_NAME")); //name
                const birthdate = decodeURIComponent(
                  getNiceDataService.getValue(sDecData, "BIRTHDATE"),
                ); //생년월일(YYYYMMDD)
                const gender = decodeURIComponent(getNiceDataService.getValue(sDecData, "GENDER")); //성별
                const nationalinfo = decodeURIComponent(
                  getNiceDataService.getValue(sDecData, "NATIONALINFO"),
                ); //내.외국인정보
                const dupinfo = decodeURIComponent(getNiceDataService.getValue(sDecData, "DI")); //중복가입값(64byte)
                const conninfo = decodeURIComponent(getNiceDataService.getValue(sDecData, "CI")); //연계정보 확인값(88byte)
                const mobileno = decodeURIComponent(
                  getNiceDataService.getValue(sDecData, "MOBILE_NO"),
                ); //휴대폰번호(계약된 경우)
                const mobileco = decodeURIComponent(
                  getNiceDataService.getValue(sDecData, "MOBILE_CO"),
                ); //통신사(계약된 경우)
                userInfo = {
                  sRtnMSG,
                  requestnumber,
                  responsenumber,
                  authtype,
                  name,
                  birthdate,
                  gender,
                  nationalinfo,
                  dupinfo,
                  conninfo,
                  mobileno,
                  mobileco,
                };
              } else {
                //항목의 설명은 개발 가이드를 참조
                const requestnumber = decodeURIComponent(
                  getNiceDataService.getValue(sDecData, "REQ_SEQ"),
                ); //CP요청 번호 , main에서 생성한 값을 되돌려준다. 세션등에서 비교 가능
                const authtype = decodeURIComponent(
                  getNiceDataService.getValue(sDecData, "AUTH_TYPE"),
                ); //인증수단
                const errcode = decodeURIComponent(
                  getNiceDataService.getValue(sDecData, "ERR_CODE"),
                ); //본인인증 실패 코드
                userInfo = { sRtnMSG, requestnumber, authtype, errcode };
              }
            }
            //console.log(sDecData);
            console.log("userInfo", userInfo);

            if (sRtnMSG != "") {
              reject({
                status: "error",
                error: {
                  sRtnMSG: sRtnMSG,
                  requestnumber: "",
                  authtype: "",
                  errcode: "",
                },
              });
            } else {
              resolve({ status: "success", userInfo });
            }
          });
        });
      };
      return await exAsync(cmd);
    }
  } catch (error) {
    return {
      status: "error",
      error: {
        sRtnMSG: "Input error",
        requestnumber: "",
        authtype: "",
        errcode: "",
      },
    };
  }
};
